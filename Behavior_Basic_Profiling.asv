%% keep pairs with behaivor
allPairs_behav = {};
for i = 1:length(allPairs)
    for k = 1:length(allPairs{i}{1}.Behavior)
        if ~isempty(allPairs{i}{1}.Behavior{k})
            allPairs_behav = [allPairs_behav, allPairs(i)];
            disp(i)
            break
        end
    end

end

%% Start
all_behav_exp = {'attack','chasing','tussling','threaten','escape','defend',...
    'flinch','general-sniffing','sniff_face','sniff_genital','approach',...
    'follow','interaction', 'socialgrooming', 'mount','dig',...
    'selfgrooming', 'climb', 'exploreobj', 'biteobj', 'stand', 'nesting','human_interfere', 'other'};
social_bv = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15];
nonsocial_bv = [17,22,24];
explor_bv = [16,18,19,20,21];
agonist_bv = [1,2,3,4];
defensive_bv = [5,6,7];
nondefensive_social_bv = setdiff(social_bv, defensive_bv);
sniff_bv = [8,9,10];
initiative_bv = [11,12];
allbehav_idx = {social_bv,nonsocial_bv,explor_bv,agonist_bv,defensive_bv,nondefensive_social_bv,sniff_bv,initiative_bv};
hm_interfere = 23;
%% percentage of each behavior category
categorical_bv = cell(1,length(allbehav_idx));
individual_bv = cell(1,24);
animalID = {};
animalGen = {};
for i = 1:length(allPairs_behav)
    M1 = allPairs_behav{i}{1};
    M2 = allPairs_behav{i}{2};
    Gen1 = M1.GenType;
    Gen2 = M2.GenType;
    m = find(~cellfun(@isempty,M1.Behavior));
    % remove human_interfere
    non_human = ~(M1.Behavior{m}.LogicalVecs{hm_interfere} + M2.Behavior{m}.LogicalVecs{hm_interfere});
    animalGen = [animalGen;Gen1;Gen2];
    % deal with behavior categories
    for j = 1:length(allbehav_idx)
        cur_behav_idx = allbehav_idx{j};
        collapsed_logical_1 = zeros(1,sum(non_human));
        collapsed_logical_2 = collapsed_logical_1;
        for k = cur_behav_idx
            collapsed_logical_1 = collapsed_logical_1 + M1.Behavior{m}.LogicalVecs{k}(non_human);
            collapsed_logical_2 = collapsed_logical_2 + M2.Behavior{m}.LogicalVecs{k}(non_human);
        end
        perct1 = sum(collapsed_logical_1) / length(collapsed_logical_1);
        perct2 = sum(collapsed_logical_2) / length(collapsed_logical_2);
        categorical_bv{j} = [categorical_bv{j};perct1;perct2];
    end
    % deal with individual behaviors
    for j = 1:24 % except human & other
       collapsed_perct_1 = sum(M1.Behavior{m}.LogicalVecs{j}(non_human))/sum(non_human);
       collapsed_perct_2 = sum(M2.Behavior{m}.LogicalVecs{j}(non_human))/sum(non_human);
       individual_bv{j} = [individual_bv{j};collapsed_perct_1;collapsed_perct_2];
    end
    animalID = [animalID;M1.AnimalID;M2.AnimalID];
    aimalGen = [animalGen;M1.GenType;M2.GenType];
    
end
%% generate table, vars = 6 behav types + 1 gen type + aID
T1 = table(categorical_bv{:}, animalID, animalGen, 'VariableNames',{'social','nonsocial(idle/groom)','explore','agonist','defensive','nondefensive_social','sniff','initiative','animalID','animalGen'});
writetable(T1,'categorical_bv_prct.csv');
T2 = table(individual_bv{:}, animalID, animalGen, 'VariableNames',[all_behav_exp(1:24),'animalID','animalGen']);
writetable(T2,'individual_bv_prct.csv');
%% 
KO_behav_grp = T1(strcmp(T1.animalGen,'KO'),:);
HET_behav_grp = T1(strcmp(T1.animalGen,'HET'),:);
WT_behav_grp = T1(strcmp(T1.animalGen,'WT'),:);
colnames = T1.Properties.VariableNames;
figure; 
for i = 1:8
    ax = subplot(2,4,i); XZBoxPlot({KO_behav_grp.(colnames{i}),HET_behav_grp.(colnames{i}),WT_behav_grp.(colnames{i})},[],[],{'KO','HET','WT'},[],ax); title(colnames{i});
end

KO_behav = T2(strcmp(T2.animalGen,'KO'),:);
HET_behav = T2(strcmp(T2.animalGen,'HET'),:);
WT_behav = T2(strcmp(T2.animalGen,'WT'),:);
colnames = T2.Properties.VariableNames;
figure; behav_idx = [1:14,16:19,21,24];
for j = 1:numel(behav_idx)
    i = behav_idx(j);
    ax = subplot(3,7,j); XZBoxPlot({KO_behav.(colnames{i}),HET_behav.(colnames{i}),WT_behav.(colnames{i})},[],[],{'KO','HET','WT'},[],ax); title(strrep(colnames{i},'_','-'));
end
saveas(gcf,'Categorical_interval.png','png');
saveas(gcf,'Individual_behavior.png','png');

%% Interval between social/nonsocial bouts
interval_from_last = cell(1,length(allbehav_idx));
interval_from_any_last = cell(1,length(allbehav_idx));
for i = 1:length(allPairs_behav)
    M1 = allPairs_behav{i}{1};
    M2 = allPairs_behav{i}{2};
    Gen1 = M1.GenType;
    Gen2 = M2.GenType;
    m = find(~cellfun(@isempty,M1.Behavior));
    M1b = M1.Behavior{m};
    M2b = M2.Behavior{m};
    for j = 1:length(allbehav_idx)
        cur_start1 = [];
        cur_end1 = [];
        cur_start2 = [];
        cur_end2 = [];
        cur_behav_idx = allbehav_idx{j};
        for k = cur_behav_idx
            cur_start1 = [cur_start1,M1b.OnsetTimes{k}];
            cur_end1 = [cur_end1,M1b.OffsetTimes{k}];
            cur_start2 = [cur_start2,M2b.OnsetTimes{k}];
            cur_end2 = [cur_end2,M2b.OffsetTimes{k}];
        end
        cur_start1 = sort(cur_start1); cur_end1 = sort(cur_end1);
        cur_start2 = sort(cur_start2); cur_end2 = sort(cur_end2);
        interval_from_last{j} = [interval_from_last{j}; mean(cur_start1(2:end)-cur_end1(1:end-1)); mean(cur_start2(2:end)-cur_end2(1:end-1))];
%         interval_from_any_last{j} = [interval_from_any_last{}];
    end
end
%%
T3 = table(interval_from_last{:}, animalID, animalGen, 'VariableNames',{'social','nonsocial(idle/groom)','explore','agonist','defensive','nondefensive_social','sniff','initiative','animalID','animalGen'});
KO_behav_grp = T3(strcmp(T3.animalGen,'KO'),:);
HET_behav_grp = T3(strcmp(T3.animalGen,'HET'),:);
WT_behav_grp = T3(strcmp(T3.animalGen,'WT'),:);
colnames = T3.Properties.VariableNames;
figure; 
for i = 1:8
    ax = subplot(2,4,i); XZBoxPlot({KO_behav_grp.(colnames{i}),HET_behav_grp.(colnames{i}),WT_behav_grp.(colnames{i})},[],[],{'KO','HET','WT'},[],ax); title(colnames{i});
end
%% get index of het-ko, ko-ko, ko-wt pairs
hetko = [];
koko = [];
kowt = [];
hethet = [];
hetwt = [];
for i = 1:length(allPairs_behav)
    gentype = sort({allPairs_behav{i}{1}.GenType,allPairs_behav{i}{2}.GenType});
    if strcmp(gentype{1},'HET')
        if strcmp(gentype{2},'HET')
            hethet = [hethet,i];
        elseif strcmp(gentype{2},'KO')
            hetko = [hetko,i];
        else
            hetwt = [hetwt,i];
        end
    elseif strcmp(gentype{1},'KO')
        if strcmp(gentype{2},'KO')
            koko = [koko,i];
        elseif strcmp(gentype{2},'WT')
            kowt = [kowt, i];
        end
    end
end
genidx = {hetko, koko, kowt,hethet, hetwt};
%% plot T1/T2 on pair basis
T1.ExpIdx = ceil((1:size(T1,1))/2)';
KOKO_grp = sortrows(T1([koko*2-1, koko*2],:),{'animalGen','ExpIdx'});
HETKO_grp = sortrows(T1([hetko*2-1,hetko*2],:),{'animalGen','ExpIdx'});
KOWT_grp = sortrows(T1([kowt*2-1,kowt*2],:),{'animalGen','ExpIdx'});
HETHET_grp = sortrows(T1([hethet*2-1,hethet*2],:),{'animalGen','ExpIdx'});
HETWT_grp = sortrows(T1([hetwt*2-1,hetwt*2],:),{'animalGen','ExpIdx'});
colnames = T1.Properties.VariableNames;

figure; 
for i = 1:8
    cur_data = {KOKO_grp.(colnames{i}), HETKO_grp(strcmp(HETKO_grp.animalGen,'KO'),:).(colnames{i}),HETKO_grp(strcmp(HETKO_grp.animalGen,'HET'),:).(colnames{i}),...
        KOWT_grp(strcmp(KOWT_grp.animalGen,'KO'),:).(colnames{i}),KOWT_grp(strcmp(KOWT_grp.animalGen,'WT'),:).(colnames{i}),HETHET_grp.(colnames{i}),...
        HETWT_grp(strcmp(HETWT_grp.animalGen,'HET'),:).(colnames{i}),HETWT_grp(strcmp(HETWT_grp.animalGen,'WT'),:).(colnames{i})};

    ax = subplot(2,4,i); XZBoxPlot(cur_data,[],[],{'KOKO','HETKO-KO','HETKO-HET','KOWT-KO','KOWT-WT','HETHET','HETWT-HET','HETWT-WT'},[],ax); title(strrep(colnames{i},'_','-'));
    ax.NextPlot = 'add';
    % add points
    for j = 1:length(cur_data)
        plot(0*cur_data{j}+j, cur_data{j},'k.','MarkerSize',10);
    end
    % add lines
    for j = [2,4,7]
        for k = 1:numel(cur_data{j})
            plot([j,j+1], [cur_data{j}(k),cur_data{j+1}(k)],'k-');
        end
    end
end
saveas(gcf, 'Categorical_by_genTypes.png','png');
%% PLSC variance explained & power distribution across behaviors
T1.PLSC1_social = zeros(size(T1,1),1);
T1.PLSC1_varfrac = zeros(size(T1,1),1);
T1.PLSC2_social = zeros(size(T1,1),1);
T1.PLSC2_varfrac = zeros(size(T1,1),1);
T1.PLSC1_social_pow = zeros(size(T1,1),1);
T1.PLSC2_social_pow = zeros(size(T1,1),1);
PLSC1var = cell(1,numel(genidx));
PLSC1social = cell(1,numel(genidx));
colnames = {'PLSC1_varfrac','PLSC1_social','PLSC1_social_pow','PLSC2_varfrac','PLSC2_social','PLSC2_social_pow'};
% hetko, koko, kowt,hethet, hetwt
for j = 1:numel(allPairs_behav)
        m = find(~cellfun(@isempty,allPairs_behav{j}{1}.Behavior));
        M1 = allPairs_behav{j}{1};
        M2 = allPairs_behav{j}{2};
        M1FTrace = M1.MS{m}.FiltTraces(M1.TimeStamp.mapTs{m}.M2B,M1.MS{m}.goodCellVec);
        M2FTrace = M2.MS{m}.FiltTraces(M2.TimeStamp.mapTs{m}.M2B,M2.MS{m}.goodCellVec);
        mlen = min(size(M1FTrace,1), size(M2FTrace,1));
        [PLSC1, PLSC2] = GetPLSC(M1FTrace(1:mlen,:),M2FTrace(1:mlen,:));
        varPLSC1 = diag(PLSC1'*PLSC1); varPLSC2 = diag(PLSC2'*PLSC2);
        T1.PLSC1_varfrac(j*2-1) = varPLSC1(1)/sum(varPLSC1); T1.PLSC1_varfrac(j*2) = varPLSC2(1)/sum(varPLSC2);
        T1.PLSC2_varfrac(j*2-1) = varPLSC1(2)/sum(varPLSC1); T1.PLSC2_varfrac(j*2) = varPLSC2(2)/sum(varPLSC2);
        social_logical1 = logical(sum(cat(1,M1.Behavior{m}.LogicalVecs{social_bv}),1));
        social_logical2 = logical(sum(cat(1,M2.Behavior{m}.LogicalVecs{social_bv}),1));
        PLSC1_1 = PLSC1(:,1); PLSC2_1 = PLSC2(:,1);
        PLSC1_2 = PLSC1(:,2); PLSC2_2 = PLSC2(:,2);
        T1.PLSC1_social_pow(j*2-1) = sum((PLSC1_1(social_logical1(1:mlen))-mean(PLSC1_1)).^2)/sum(social_logical1(1:mlen));%sum((PLSC1_1-mean(PLSC1_1)).^2);
        T1.PLSC1_social_pow(j*2) = sum((PLSC2_1(social_logical2(1:mlen))-mean(PLSC2_1)).^2)/sum(social_logical2(1:mlen));%sum((PLSC2_1-mean(PLSC2_1)).^2);
        T1.PLSC2_social_pow(j*2-1) = sum((PLSC1_2(social_logical1(1:mlen))-mean(PLSC1_2)).^2)/sum(social_logical1(1:mlen));%sum((PLSC1_2-mean(PLSC1_2)).^2);
        T1.PLSC2_social_pow(j*2) = sum((PLSC2_2(social_logical2(1:mlen))-mean(PLSC2_2)).^2)/sum(social_logical2(1:mlen));%sum((PLSC2_2-mean(PLSC2_2)).^2);
        T1.PLSC1_social(j*2-1) = sum((PLSC1_1(social_logical1(1:mlen))-mean(PLSC1_1)).^2)/sum((PLSC1_1-mean(PLSC1_1)).^2);
        T1.PLSC1_social(j*2) = sum((PLSC2_1(social_logical2(1:mlen))-mean(PLSC2_1)).^2)/sum((PLSC2_1-mean(PLSC2_1)).^2);
        T1.PLSC2_social(j*2-1) = sum((PLSC1_2(social_logical1(1:mlen))-mean(PLSC1_2)).^2)/sum((PLSC1_2-mean(PLSC1_2)).^2);
        T1.PLSC2_social(j*2) = sum((PLSC2_2(social_logical2(1:mlen))-mean(PLSC2_2)).^2)/sum((PLSC2_2-mean(PLSC2_2)).^2);
        
    end

% XZBoxPlot(PLSC1var,[],[2,1,3,4,5],{'hetko','koko','kowt','hethet','hetwt'},[]);title('Fraction of variance in PLSC1'); saveas(gcf,'F_variance_PLSC1.png','png');
% XZBoxPlot(PLSC1social,[],[2,1,3,4,5],{'hetko','koko','kowt','hethet','hetwt'},[]); title('Average power in social frames'); saveas(gcf,'avgSocialPower.png','png');
KOKO_grp = sortrows(T1([koko*2-1, koko*2],:),{'animalGen','ExpIdx'});
HETKO_grp = sortrows(T1([hetko*2-1,hetko*2],:),{'animalGen','ExpIdx'});
KOWT_grp = sortrows(T1([kowt*2-1,kowt*2],:),{'animalGen','ExpIdx'});
HETHET_grp = sortrows(T1([hethet*2-1,hethet*2],:),{'animalGen','ExpIdx'});
HETWT_grp = sortrows(T1([hetwt*2-1,hetwt*2],:),{'animalGen','ExpIdx'});
figure; 
for i = 1:6
    cur_data = {KOKO_grp.(colnames{i}), HETKO_grp(strcmp(HETKO_grp.animalGen,'KO'),:).(colnames{i}),HETKO_grp(strcmp(HETKO_grp.animalGen,'HET'),:).(colnames{i}),...
        KOWT_grp(strcmp(KOWT_grp.animalGen,'KO'),:).(colnames{i}),KOWT_grp(strcmp(KOWT_grp.animalGen,'WT'),:).(colnames{i}),HETHET_grp.(colnames{i}),...
        HETWT_grp(strcmp(HETWT_grp.animalGen,'HET'),:).(colnames{i}),HETWT_grp(strcmp(HETWT_grp.animalGen,'WT'),:).(colnames{i})};
    hilight = {KOKO_grp.agonist>=0.02, HETKO_grp(strcmp(HETKO_grp.animalGen,'KO'),:).agonist>=0.02,KOWT_grp(strcmp(KOWT_grp.animalGen,'KO'),:).agonist>=0.02};
    ax = subplot(2,3,i); XZBoxPlot(cur_data,[],[],{'KOKO','HETKO-KO','HETKO-HET','KOWT-KO','KOWT-WT','HETHET','HETWT-HET','HETWT-WT'},[],ax); title(strrep(colnames{i},'_','-'));
    ax.NextPlot = 'add';
    % add points
    for j = 1:length(cur_data)
        plot(0*cur_data{j}+j, cur_data{j},'k.','MarkerSize',10);
        if any([1,2,4]==j)
            plot
        end
    end
    % add lines
    for j = [2,4,7]
        for k = 1:numel(cur_data{j})
            plot([j,j+1], [cur_data{j}(k),cur_data{j+1}(k)],'k-');
        end
    end
end
                